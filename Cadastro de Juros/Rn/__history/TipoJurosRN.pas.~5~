unit TipoJurosRN;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,  Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  Vcl.StdCtrls, Vcl.Mask, RxToolEdit, RxCurrEdit, Vcl.ComCtrls, Vcl.ToolWin,
  Vcl.ExtCtrls, System.ImageList,  Vcl.ImgList, PngImageList, RxLookup, DB,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, TipoJuros, TipoJurosDAO;

type
  TTipoJurosRn = class

    private
      TipoJurosDAO: TTipoJurosDao;
      bNovo, bAtualizar, bVisualizar: boolean;

    public
      constructor Create;
      destructor Destroy; override;
      procedure botaoVoltarCadastro();
      procedure botaoVoltarPesquisa();
      procedure botaoNovo();
      procedure botaoEditar();
      procedure botaoExcluir(TipoJuros: TTipoJuros);
      procedure botaoGravar(TipoJuros: TTipoJuros);
      procedure botaoCancelar();
      function botaoPesquisarCadastro(): Boolean;
      procedure botaoVisualizar(zGet: TZquery);
      procedure setTipoJuros(TipoJuros: TTipoJuros);
      procedure botaoPesquisarPesquisa(lblNumRegistros: TLabel; zGet: TZquery;
                TipoJuros: TTipoJuros);
      procedure getTipoJuros(lblNumRegistros: TLabel; zGet: TZquery);
  end;

implementation

uses uCadastroTipoJuros, uPesquisaTipoJuros;


constructor TTipoJurosRn.Create;
begin
  TipoJurosDAO := TTipoJurosDAO.Create;
end;

destructor TTipoJurosRn.Destroy;
begin
  TipoJurosDAO.Free;
  inherited;
end;

procedure TTipoJurosRn.botaoVoltarCadastro;
begin
  frmCadastroTipoJuros.Close;
end;

procedure TTipoJurosRn.botaoVoltarPesquisa;
begin
  frmPesquisaTipoJuros.Close;
end;

procedure TTipoJurosRn.botaoNovo;
begin
    bNovo      := true;
    bAtualizar := false;
end;

procedure TTipoJurosRn.botaoEditar;
begin
  bNovo      := false;
  bAtualizar := true;
end;

procedure TTipoJurosRn.botaoExcluir(TipoJuros: TTipoJuros);
begin
  try

    if Application.MessageBox(PChar('Deseja realmente excluir?'), 'Confirmação', MB_ICONQUESTION+MB_YESNO) = mrYes then
    begin
      TipoJurosDAO.excluir(TipoJuros);
    end;
  except
    on E: Exception do
    begin
      Application.MessageBox(PChar(E.Message), 'Atenção', MB_ICONINFORMATION + MB_OK);
    end;
  end;
end;

procedure TTipoJurosRn.botaoGravar(TipoJuros: TTipoJuros);
begin

  try
    if Tipojuros.getDescricao = '' then
       raise exception.Create('O campo Descricão é Obrigatório!');

    if bNovo then
       TipoJurosDAO.incluir(Tipojuros);

    if bAtualizar then
       TipoJurosDAO.editar(Tipojuros);

  except
    on E: Exception do
    begin
      Application.MessageBox(PChar(E.Message), 'Atenção', MB_ICONINFORMATION + MB_OK);
    end;
  end;
end;

procedure TTipoJurosRN.botaoCancelar;
begin
  bNovo      := false;
  bAtualizar := false;
end;

function TTipoJurosRN.botaoPesquisarCadastro(): Boolean;
begin
  if frmPesquisaTipoJuros = nil then
  begin
    frmPesquisaTipoJuros := TfrmPesquisaTipoJuros.Create(frmPesquisaTipoJuros);
    frmPesquisaTipoJuros.ShowModal;
    bVisualizar := frmPesquisaTipoJuros.getVisualizar;
  end;
  frmPesquisaTipoJuros := nil;
  Result := bVisualizar
end;

procedure TTipoJurosRN.botaoPesquisarPesquisa(lblNumRegistros: TLabel; zGet: TZquery;
          TipoJuros: TTipoJuros);
begin
  try

    if TipoJuros.getDescricao = '' then
       raise exception.Create('O campo "descricão" é Obrigatório!');


    TipoJurosDAO.pesquisar(zGet, tipojuros);

    lblNumRegistros.Caption := '0';

   if not zGet.IsEmpty then
     lblNumRegistros.Caption := IntToStr(zGet.RecordCount);

  except
    on E: Exception do
    begin
      Application.MessageBox(PChar(E.Message), 'Atenção', MB_ICONINFORMATION + MB_OK);
    end;
  end;
end;

procedure TTipoJurosRn.botaoVisualizar(zGet: TZquery);
var
  TipoJuros: TTipoJuros;
begin
  if Assigned(frmCadastroTipoJuros) then
  begin
    if not frmPesquisaTipoJuros.zqGet.IsEmpty then
    begin
      TipoJuros := TTipoJuros.Create;

      TipoJuros.setDescricao(zGet.FieldByName('descrição').AsString);
      TipoJuros.setCodigo(zGet.FieldByName('Codigo').AsInteger);
      setTipoJuros(TipoJuros);

      botaoVoltarPesquisa();
    end;
  end;
end;

procedure TTipoJurosRN.setTipoJuros(TipoJuros: TTipoJuros);
begin
  with frmCadastroTipoJuros do
  begin
    idTipoJuros             := TipoJuros.getCodigo;
    edtDescricao.Text  := TipoJuros.getDescricao;
   end;

end;

procedure TTipoJurosRN.getTipoJuros(lblNumRegistros: TLabel; zGet: TZquery);
begin
    TipoJurosDAO.getTipoJuros(zGet);

    lblNumRegistros.Caption := '0';

   if not zGet.IsEmpty then
     lblNumRegistros.Caption := IntToStr(zGet.RecordCount);
end;

end.
